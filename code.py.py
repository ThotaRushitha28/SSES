# -*- coding: utf-8 -*-
"""give all the code including the code which remain...

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aHnFg8I3grMLpw2BKREEKnU-fGcqLHIq
"""

import cv2
import matplotlib.pyplot as plt
from glob import glob
import easyocr as eas

# Function to display an image
def show(img):
  plt.imshow(img)
  plt.show()

# Load and convert the image
img = cv2.imread(path5)  # Replace 'path5' with your desired image path
image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert to RGB for EasyOCR

# Text extraction using EasyOCR
reader = eas.Reader(['en'], gpu=False)  # English language, no GPU
data = reader.readtext(image)

# Print the extracted text
print(data)

# Alternatively, display image with bounding boxes and text
for detection in data:
  bbox = detection[0]  # Bounding box coordinates
  text = detection[1]  # Recognized text
  confidence = detection[2]  # Confidence score

  # Draw bounding box on image (optional)
  cv2.rectangle(image, (int(bbox[0][0]), int(bbox[0][1])), (int(bbox[2][0]), int(bbox[2][1])), (0, 255, 0), 2)

  # Display image with text and confidence (optional)
  plt.imshow(image)
  plt.text(int(bbox[0][0]), int(bbox[0][1]), f"{text} ({confidence:.2f})", color='white', bbox=dict(facecolor='black', alpha=0.5))
plt.show()

# (Rest of the code remains the same for image processing and manipulation)

"""**Image processing and manipulation:**"""

# Load and convert the image
img = cv2.imread(path5)  # Replace 'path5' with your desired image path
image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert to RGB for EasyOCR

# Convert image into grayscale
grayscale = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Create a threshold
thresh = cv2.threshold(grayscale, 10, 225, cv2.THRESH_BINARY_INV  + cv2.THRESH_OTSU)[1]

# Display images
fig = plt.figure(figsize=(9, 9))
img1 = fig.add_subplot(221)
img1.imshow(image)
plt.title('RGB_converted')
img2 = fig.add_subplot(222)
img2.imshow(grayscale)
plt.title('Grayscale')
img3 = fig.add_subplot(223)
img3.imshow(img)
plt.title('IMAGE_Original')
img4 = fig.add_subplot(224)
img4.imshow(thresh)
plt.title('threshold')
plt.show()

# Crop image (optional)
start_point = (20, 470)
end_point = (600, 680)
color = (255, 0, 0)
thickness = 2
rectangle = cv2.rectangle(image, (20, 470), (600, 680), (255, 0, 0),2)

# Show cropped image (optional)
x = '500:680'
y = '40:470'
crop = image[50:150, 50:]
show(crop)

# Apply threshold to cropped image (optional)
grayscale_crop = cv2.cvtColor(crop, cv2.COLOR_BGR2GRAY)
thresh_crop = cv2.threshold(grayscale_crop, 120, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
show(thresh_crop)

# Load annotation data (optional)
annot = pd.read_parquet('/kaggle/input/textocr-text-extraction-from-images-dataset/annot.parquet')
annot1 = pd.read_parquet('/kaggle/input/textocr-text-extraction-from-images-dataset/img.parquet')

# Load glob images (optional)
glob_image = glob('/kaggle/input/textocr-text-extraction-from-images-dataset/train_val_images/train_images/*')

# Display glob image (optional)
image_prediction = plt.imshow((plt.imread(glob_image[1])))
image_prediction1 = glob_image[1]

"""This combined code includes the original image processing and manipulation code, as well as the updated text extraction code using EasyOCR. You can customize the image paths and optional sections based on your specific requirements."""